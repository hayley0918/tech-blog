{
    "data" : [
        {
            "id": 1,
            "blogCategory": "Programming",
            "blogTitle" : "What is OOP?",
            "postedOn": "18, July, 2020",
            "author": "Hayley Choi",
            "blogImage": "OOP.png",
            "postP1": "To start with, high-level view of what Object-oriented programming (OOP) is. The basic idea of OOP is that we use objects to model real world things that we want to represent inside our programs, and/or provide a simple way to access functionality that would otherwise be hard or impossible to make use of.",
            "postP2": "Objects can contain related data and code, which represent information about the thing you are trying to model, and functionality or behavior that you want it to have. Object data (and often, functions too) can be stored neatly (the official word is encapsulated) inside an object package, making it easy to structure and access. objects are also commonly used as data stores that can be easily sent across the network.",
            "postP3": "To start this off, we could return to our Person object type from our first objects article, which defines the generic data and functionality of a person. There are lots of things you could know about a person (their address, height, shoe size, DNA profile, passport number, significant personality traits ...) , but in this case we are only interested in showing their name, age, gender, and interests, and we also want to be able to write a short introduction about them based on this data, and get them to say hello. This is known as abstraction — creating a simple model of a more complex thing, which represents its most important aspects in a way that is easy to work with for our program's purposes.",
            "postP4": "Defining an object template",
            "postP5": "Say we have a program. It has a few logically different objects which communicate with each other according to the rules defined in the program. Encapsulation is achieved when each object keeps its state private, inside a class. Other objects don’t have direct access to this state. Instead, they can only call a list of public functions called methods. So, the object manages its own state via methods and no other class can touch it unless explicitly allowed. If you want to communicate with the object, you should use the methods provided. But (by default), you can’t change the state.",
            "postP6": "Creating actual objects",
            "postP7": "From our class, we can create object instances — objects that contain the data and functionality defined in the class. From our Person class, we can now create some actual people. When an object instance is created from a class, the class's constructor function is run to create it. This process of creating an object instance from a class is called instantiation — the object instance is instantiated from the class.",
            "postP8": "Specialist classes",
            "postP9": "In OOP, we can create new classes based on other classes — these new child classes can be made to inherit the data and code features of their parent class, so you can reuse functionality common to all the object types rather than having to duplicate it.  Where functionality differs between classes, you can define specialized features directly on them as needed.",
            "postP10": "This is really useful. You can also define the same feature separately in different classes, as each definition of that feature will be in a different namespace. The fancy word for the ability of multiple object types to implement the same functionality is polymorphism.",
            "postP11": "OOP focuses on the objects that developers want to manipulate rather than the logic required to manipulate them. This approach to programming is well-suited for programs that are large, complex and actively updated or maintained. Additional benefits of OOP include code reusability, scalability and efficiency."
        },
        {
            "id" : 2,
            "blogCategory": "Programing",
            "blogTitle": "Restful API?",
            "postedOn": "15 July, 2020",
            "author": "Hayley Choi",
            "blogImage": "restAPI.png",
            "postP1": "There’s a high chance you came across the term “REST API” if you’ve thought about getting data from another source on the internet, such as Twitter or Github. But what is a REST API? What can it do for you? How do you use it? Let’s say you’re trying to find videos about Batman on Youtube. You open up Youtube, type “Batman” into a search field, hit enter, and you see a list of videos about Batman. A REST API works in a similar way. You search for something, and you get a list of results back from the service you’re requesting from.",
            "postP2": "REpresentational State Transfer (REST) is an architectural style that handles the client-server relationship, with the purpose of aiming for speed and performance by using re-usable components. REST as a technology was introduced into the world in a 2000 doctoral dissertation by Roy Fielding. Nowadays it is generally preferred to SOAP (Simple Object Access Protocol) as REST uses the less bandwidth and is simpler and more flexible for internet usage. We can use it to fetch or give some information from a web service, this is done via an HTTP request to the REST API.",
            "postP3": "We can define a RESTful API as one that is stateless, it separates concerns between client-server, it allows caching of data client-side and it utilizes standardized base URLs and methods to perform the actions required to manipulate, add or delete data.",
            "postP4": "REST in action",
            "postP5": "HTTP has five methods which are commonly used in a REST based architecture: POST, GET, PUT, PATCH, and DELETE. In fact they correspond to create, read, update, and delete (CRUD) operations respectively. It should also be noted that there are other methods which are less frequently used, such as OPTIONS and HEAD.",
            "postP6": "Let’s now take a closer look at how this is done! Our request is sent from the client to the server via HTTP in the form of a web URL. Using either GET, POST, PUT or DELETE. Then a response is sent back from server in the form of a resource, which could be anything like HTML, XML, Image or JSON. JSON is by far the most popular format.",
            "postP7": "Working with REST data",
            "postP8": "Furthermore, it has become common practice for REST APIs to also return data in a standard format. As mentioned the most popular format nowadays is JSON (JavaScript Object Notation). The standardization of the formatting of the data is another step towards uniformity in the way resources are interacted with on the web, allowing for developers to solve problems and not spend their time in configuration of the basic architecture!",
            "postP9": "Where can you find RESTful APIs? Everywhere! Twitter. Google. Open Weather Map. YouTube. Most of the popular services we use daily utilize a RESTful architecture for their API service. So go forth & explore the world of adding API functionality to your websites & apps!"
        },
        {
            "id": 3,
            "blogCategory": "Programming",
            "blogTitle": "Test Driven Development?",
            "postedOn": "12 July, 2020",
            "author": "Hayley Choi",
            "blogImage": "tdd.png",
            "postP1": "Test-driven Development was first formalized by Kent Beck in 2003. As the name suggests, it achieves this by coding to pass tests, rather than to meet requirements directly. The tests are formulated such that they result in the requirements being met. The aim is to keep the development cycle as short as possible so that you are free to respond to changing requirements dynamically and effectively.",
            "postP2": "1. Before you write implementation code, write some code that proves that the implementation works or fails. Watch the test fail before moving to the next step (this is how we know that a passing test is not a false positive — how we test our tests).", 
            "postP3": "2. Write the implementation code and watch the test pass.", 
            "postP4": "3. Refactor if needed. You should feel confident refactoring your code now that you have a test to tell you if you’ve broken something.", 
            "postP5": "The TDD cycle starts with creating a new test (or tests). These should advance incrementally from the existing tests. At the start of the project, a test may be as simple as getting your API server to send you “Hello World”. But as the project advances, tests become more complex and slowly add more functionality to the code. The test should be defined as a proper formal test case, defining the expected behavior and including the expected mode of failure. This may require the use of user stories and the like to explain the required functional behavior.", 
            "postP6": "The second stage of the cycle is to run all tests, both the newly written ones and the existing ones. If you are doing things right, the new tests should fail in the expected fashion. This gives you confidence that your test methodology and test harness are working.",
            "postP7": "Next, the developer writes code with the specific aim of enabling that test to pass. The aim here is not to produce perfect code, simply to make the test pass as quickly as possible. The developer is likely to repeatedly test to see whether the new code passes all the tests. Once it does, then the developer can move to the final stage.",
            "postP8": "Once all current tests have passed, the final thing is to refactor the code and clean it up. As mentioned above, the code that was written to help the tests pass may be pretty grungy. At this stage, it’s important to remove any duplication, apply good coding style rules, add documentation and try when possible to make class and object names self-documenting/self-descriptive. Throughout this process, it’s essential to keep checking that your tests all pass still. Finally, you are ready to start the cycle again.",
            "postP9": "What makes TDD so popular?",
            "postP10": "Test-driven Development is becoming increasingly popular for several reasons. One of the biggest is that it provides a rigorous and effective methodology for extremely short development cycles. The aim of TDD is to create clean, simple code that satisfies the requirements with no or minimal code bloat.",
            "postP11": "TDD can be a really effective development methodology. Because TDD encourages developers to focus on writing code that achieves the specific required functionality, it leads to less bloated code. It also tends to result in stable code that needs little refactoring. Functionize’s artificial intelligence-driven test framework is particularly useful for TDD because it simplifies both test creation and test maintenance. As a result, it allows the team to focus on defining good tests and developing good code."
        },
        {
            "id": 4,
            "blogCategory": "Programming",
            "blogTitle": "React",
            "postedOn": "7 July, 2020",
            "author": "Hayley Choi",
            "blogImage": "React_component.png",
            "postP1": "React JS is a JavaScript library used in web development to build interactive elements on websites. React is created by Facebook and specializes in helping developers build user interfaces, or UIs. In terms of websites and web applications, UIs are the collection of on-screen menus, search bars, buttons, and anything else someone interacts with to use a website or app. Before React JS, developers were stuck building UIs by hand with “vanilla JavaScript” or with less UI-focused React predecessors like jQuery. That meant longer development times and plenty of opportunities for errors and bugs. So, in 2011, Facebook engineer Jordan Walke created React JS specifically to improve UI development.",
            "postP2": "How does React Work",
            "postP3": "React creates a VIRTUAL DOM in memory. Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM. React only changes what needs to be changed. React finds out what changes have been made, and changes only what needs to be changed.",
            "postP4": "React Components",
            "postP5": "Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and returns HTML via a render function. Components come in two types, Class components and Function components.",
            "postP6": "Class Component & Function Component",
            "postP7": "When creating a React component, the component's name must start with an upper case letter. The component has to include the extends React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions. The component also requires a render() method, this method returns HTML. A Function component also returns HTML, and behaves pretty much the same way as a Class component, but Class components have some additions.",
            "postP8": "Props",
            "postP9": "One way of handling component properties is by using props. Props are like function arguments, and you send them into the component as attributes. To send props into a component, use the same syntax as HTML attributes. const myelement = <Car brand='Ford' />;",
            "postP10": "React State",
            "postP11": "React components has a built-in state object. The state object is where you store property values that belongs to the component. When the state object changes, the component re-renders. The state object is initialized in the constructor. The state object can contain as many properties as you like. Refer to the state object anywhere in the component by using the this.state.propertyname syntax. To change a value in the state object, use the this.setState() method. When a value in the state object changes, the component will re-render, meaning that the output will change according to the new value(s). Always use the setState() method to change the state object, it will ensure that the component knows its been updated and calls the render() method."
        },
        {
            "id": 5,
            "blogCategory": "Programming",
            "blogTitle": "AJAX",
            "postedOn": "03 July, 2020",
            "author": "Hayley Choi",
            "blogImage": "axios.png",
            "postP1": "Ajax is short for Asynchronous JavaScript and XML, which refers to a set of web development techniques rather than an actual programming language. Although X in Ajax stands for XML, JSON is used more than XML nowadays because of its many advantages such as being lighter and a part of JavaScript. Both JSON and XML are used for packaging information in the Ajax model.",
            "postP2": "Ajax is widely used in client side programming to allow for data to be sent and received to and from a database / server. What's special about using Ajax programming is that you can exchange data in the background without actually disturbing the user experience. This method is extremely useful both for website performance and usability. Since asynchronous loading is non-render blocking, it will allow your page's HTML to continue parsing even if it encounters a script tag. From a usability standpoint, visitors can benefit from seeing certain information generated without having to reload the page.",
            "postP3": "AXIOS",
            "postP4": "Axios is a promise-based HTTP client for the browser and NodeJS. Axios makes it easy to send asynchronous HTTP requests to REST endpoints and perform CRUD operations. It can be used in plain JavaScript or with a library such as Vue or React.",
            "postP5": "The purpose of the Axios library is simply to make Ajax requests, it means that it is a very small and light library. In addition to having a very simple and lean implementation. Another important feature is the compatibility with several different browsers.",
            "postP6": "Basically it uses the Axios resource, or HTTP verb of the request (get, post, put, patch, delete, options, head), and uses the then() method to retrieve the promise, which is returned in case of success, and the method catch() which is the return of an exception. The get() method expects two parameters, the first is the URL that will be made the Ajax request, and the second is optional, which is the data that will be sent.",
            "postP7": "Fetch vs Axios",
            "postP8": "Fetch API is built into the window object, and therefore doesn’t need to be installed as a dependency or imported in client-side code. It provides a generic definition of Request and Response objects, as well as other things involved with network requests. The fetch() method takes one mandatory argument, the path to the resource you want to fetch, and returns a promise that resolves to the response to that request (successful or not). You can optionally pass an init options object as second argument (used to configure req headers for other types of HTTP requests such as PUT, POST, DELETE)",
            "postP9": "Axios needs to be installed as a dependency. However, it automatically transforms JSON data for you, thereby avoiding the two-step process of making a .fetch() request and then a second call to the .json() method on the response.",
            "postP10": "AJAX allows us to build Single Page Applications (SPAs). “An SPA is a web application or website that interacts with the user by dynamically rewriting the current page rather than loading entire new pages from a server. SPAs mean no reload or “refresh” within the user interface."
        },
        {
            "id": 6,
            "blogCategory": "Programming",
            "blogTitle": "Promises and Async/Await",
            "postedOn": "1 July, 2020",
            "author": "Hayley Choi",
            "blogImage": "asyncAwait.png",
            "postP1": "Using promises, we can write asynchronous programs in a more manageable way. Using Async/Await syntax, a promise-based asynchronous code can be written in a synchronous format which saves a lot of time and code becomes scalable. It is a fancier syntax to handle multiple promises in synchronous code fashion. When we put async keyword before a function declaration, it will return a promise and we can use await keyword inside it which blocks the code until promise it awaits resolves or rejects.",
            "postP2": "Why async/await?",
            "postP3": "JavaScript executes code in a single thread, which makes it blocking. This means until the function a has returned, the next line of code won’t be called. By default, a function with no return statement returns undefined value.",
            "postP4": "The word “async” before a function means one simple thing: a function always returns a promise. Other values are wrapped in a resolved promise automatically. So, async ensures that the function returns a promise, and wraps non-promises in it. Simple enough, right? But not only that. There’s another keyword, await, that works only inside async functions, and it’s pretty cool.",
            "postP5": "Callback Hell!!!",
            "postP6": "What we want is, the jobs should execute in series. What we can do to make sure a() completes first and then b() and then c(). Welcome to callback hell! The simple idea is to call b() in the callback of a because that’s where we know that a() has done its job and similarly call c() in the callback of a. we have nested the callback which guarantees the series operation of the function. This nesting of callbacks is called as Callback Hell. This is literally a hell because if we had more than 3 function calls, the code could get messier pretty quickly.",
            "postP7": "Promise to the rescue",
            "postP8": "Promises make our job a little easier when it comes to writing complicated asynchronous programs. A promise is an object which has then and catch methods on it. One of this method gets called when the promise returns a value or an error.",
            "postP9": "A promise object is created from Promise constructor/class which needs a callback function AKA executor function. This callback function receives the resolve and reject function arguments, either of which we must envoke with an optional payload.",
            "postP10": "Let’s emphasize: await literally makes JavaScript wait until the promise settles, and then go on with the result. That doesn’t cost any CPU resources, because the engine can do other jobs in the meantime: execute other scripts, handle events, etc.",
            "postP11": "Together they provide a great framework to write asynchronous code that is easy to both read and write. With async/await we rarely need to write promise.then/catch, but we still shouldn’t forget that they are based on promises, because sometimes we have to use these methods. Also Promise.all is nice when we are waiting for many tasks simultaneously."
        }
    ]
}